import { Card, Typography, Space } from 'antd';
import { CheckCircleTwoTone, CloseCircleTwoTone } from '@ant-design/icons';
import { useEffect, useState } from 'react';

const { Text } = Typography;

function Display({ selectedNumbers, selectedColor, spinResult, isSpinning }) {
    const [displayedNumber, setDisplayedNumber] = useState(null);

    useEffect(() => {
        if (isSpinning) {
            let timeout;
            let currentNumber = 0;
            const spinInterval = setInterval(() => {
                setDisplayedNumber(currentNumber);
                currentNumber = (currentNumber + 1) % 37; // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —á–∏—Å–ª–∞ –¥–æ 36
            }, 100);

            timeout = setTimeout(() => {
                clearInterval(spinInterval);
                setDisplayedNumber(spinResult);
            }, 5000);

            return () => {
                clearInterval(spinInterval);
                clearTimeout(timeout);
            };
        }
    }, [isSpinning, spinResult]);

    return (
        <div style={styles.displayContainer}>
            <Card style={{ ...styles.card, ...(isSpinning && styles.cardSpinning) }}>
                <Space direction="vertical" align="center">
                    {isSpinning ? (
                        <Text strong style={styles.numberText}>
                            {displayedNumber !== null && <span>{displayedNumber}</span>}
                        </Text>
                    ) : (
                        <>
                            {selectedNumbers.length > 0 ? (
                                <Text strong style={styles.numberText}>
                                    <CheckCircleTwoTone twoToneColor="#52c41a" /> –í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞: {selectedNumbers.join(', ')}
                                </Text>
                            ) : (
                                <Text strong style={styles.numberText}>
                                    <CloseCircleTwoTone twoToneColor="#eb2f96" /> –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 36
                                </Text>
                            )}
                            {selectedColor && (
                                <Text style={styles.colorText}>
                                    <span style={{ color: selectedColor === 'red' ? '#ff4d4f' : '#595959' }}>
                                        {selectedColor === 'red' ? 'üî¥ –ö—Ä–∞—Å–Ω—ã–π' : '‚ö´ –ß–µ—Ä–Ω—ã–π'}
                                    </span>
                                </Text>
                            )}
                        </>
                    )}
                </Space>
            </Card>
        </div>
    );
}

const styles = {
    displayContainer: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100%',
        padding: '15px',
    },
    card: {
        width: '100%',
        maxWidth: '900px', // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–π —à–∏—Ä–∏–Ω—ã
        backgroundColor: 'white',
        borderRadius: '12px', // –°–¥–µ–ª–∞–Ω—ã –±–æ–ª–µ–µ –æ–∫—Ä—É–≥–ª—ã–º–∏ —É–≥–ª—ã
        boxShadow: '0 8px 16px rgba(0, 0, 0, 0.2)', // –£—Å–∏–ª–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω–∏
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        padding: '30px', // –£–≤–µ–ª–∏—á–µ–Ω padding –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
        transition: 'max-width 0.5s ease', // –î–æ–±–∞–≤–ª–µ–Ω –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
    },
    cardSpinning: {
        maxWidth: '1200px', // –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    },
    numberText: {
        fontSize: '28px', // –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        fontWeight: 'bold',
        textAlign: 'center',
        color: '#1890ff', // –î–æ–±–∞–≤–ª–µ–Ω —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    },
    colorText: {
        fontSize: '24px', // –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        marginTop: '15px', // –£–≤–µ–ª–∏—á–µ–Ω –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        textAlign: 'center',
    },
};

export default Display;
